{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","delay","step","amount","submitBtn","stepTimer","promises","counterPromise","onClickSubmit","e","console","log","value","setInterval","clearInterval","createPromise","position","Math","random","resolve","reject","addEventListener","preventDefault"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,qBAC/BE,EAAOH,SAASC,cAAc,oBAC9BG,EAASJ,SAASC,cAAc,sBAChCI,EAAYN,EAAKE,cAAc,UACrC,IAAIK,EAAY,KAChB,MAAMC,EAAW,GAEjB,IAAIC,EAAiB,EAQrB,SAASC,EAAcC,GACrBC,QAAQC,IAAI,UAAWR,EAAOS,OAE9BP,EAAYQ,YAAY,KACtBN,GAAkB,EAClBG,QAAQC,IAAIJ,GACRA,KAAoBJ,EAAOS,QAC7BE,cAAcT,GACdK,QAAQC,IAAI,UAEdI,EAAcR,EAAgBN,EAAMW,QAQnCV,EAAKU,OAIV,SAASG,EAAcC,EAAUf,GACTgB,KAAKC,SAAW,GAGpCC,QAAQ,CAAEH,SAAAA,EAAUf,MAAAA,IAGpBmB,OAAO,0CAnCXtB,EAAKuB,iBAAiB,SAAUZ,IAC9BA,EAAEa,mBAGJlB,EAAUiB,iBAAiB,QAASb","file":"03-promises.1c20b296.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\nconst delay = document.querySelector('input[name=delay]');\nconst step = document.querySelector('input[name=step]');\nconst amount = document.querySelector('input[name=amount]');\nconst submitBtn = form.querySelector('button');\nlet stepTimer = null;\nconst promises = [];\n\nlet counterPromise = 0;\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n});\n\nsubmitBtn.addEventListener('click', onClickSubmit);\n\nfunction onClickSubmit(e) {\n  console.log('amount', +amount.value);\n\n  stepTimer = setInterval(() => {\n    counterPromise += 1;\n    console.log(counterPromise);\n    if (counterPromise === +amount.value) {\n      clearInterval(stepTimer);\n      console.log('STOP!');\n    }\n    createPromise(counterPromise, delay.value);\n    // createPromise(counterPromise, delay.value)\n    //   .then(({ position, delay }) => {\n    //     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    //   })\n    //   .catch(({ position, delay }) => {\n    //     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    //   });\n  }, step.value);\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    resolve({ position, delay });\n  } else {\n    // Reject\n    reject(\"Error! Error passed to reject function\");\n  }\n}\n"]}